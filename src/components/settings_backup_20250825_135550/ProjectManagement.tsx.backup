'use client';

import React, { useState, Fragment, useRef, useEffect, useCallback } from 'react';
import {
  Box,
  Card,
  CardHeader,
  CardContent,
  Grid,
  TextField,
  Button,
  Typography,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  InputAdornment,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
  Chip,
  Checkbox,
  FormControlLabel,
} from '@mui/material';
import {
  Campaign as CampaignIcon,
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  ExpandMore as ExpandMoreIcon,
  Business as BusinessIcon,
  LocationOn as LocationIcon,
  AttachMoney as MoneyIcon,
  People as PeopleIcon,
  AccountTree as AccountTreeIcon,
  Store as StoreIcon,
} from '@mui/icons-material';

interface Store {
  id: string;
  name: string;           // 店舗名
  address: string;        // 店舗住所
  manager: string;        // 店舗責任者
  phone: string;          // 店舗電話番号
  openingHours: string;   // 営業時間
}

interface LayerPerson {
  id: string;
  name: string;
  position: string;       // 役職
  phone: string;
  email?: string;
  assignedStores: string[]; // 担当店舗ID配列
  parentLayerPersonId?: string; // 上位レイヤーの人員ID
}

interface AgencyData {
  id: string;
  companyName: string;
  address: string;
  stores: Store[];        // 代理店傘下の店舗一覧
  layers: {
    layer1: LayerPerson[];
    layer2: LayerPerson[];
    layer3: LayerPerson[];
    layer4: LayerPerson[];
  };
}

interface LocationDetail {
  id: string;
  name: string;
}

interface EventLocationData {
  id: string;
  agencyId: string;
  address: string;
  locationName: string;
  locationDetails: string;
  locationDetailList: LocationDetail[];
  pricing: {
    tuesday: { closer: number; girl: number; };
    wednesday: { closer: number; girl: number; };
    thursday: { closer: number; girl: number; };
    friday: { closer: number; girl: number; };
    saturday: { closer: number; girl: number; };
    sunday: { closer: number; girl: number; };
    monday: { closer: number; girl: number; };
  };
}

const initialAgencyData: Omit<AgencyData, 'id'> = {
  companyName: '',
  address: '',
  stores: [],
  layers: {
    layer1: [],
    layer2: [],
    layer3: [],
    layer4: [],
  },
};

const initialLocationData: Omit<EventLocationData, 'id'> = {
  agencyId: '',
  address: '',
  locationName: '',
  locationDetails: '',
  locationDetailList: [],
  pricing: {
    tuesday: { closer: 0, girl: 0 },
    wednesday: { closer: 0, girl: 0 },
    thursday: { closer: 0, girl: 0 },
    friday: { closer: 0, girl: 0 },
    saturday: { closer: 0, girl: 0 },
    sunday: { closer: 0, girl: 0 },
    monday: { closer: 0, girl: 0 },
  },
};

// サンプルデータ
const sampleAgencies: AgencyData[] = [
  {
    id: '1',
    companyName: 'ABC代理店',
    address: '東京都新宿区西新宿1-1-1',
    stores: [
      {
        id: 'store1',
        name: '渋谷店',
        address: '東京都渋谷区道玄坂1-1-1',
        manager: '山田店長',
        phone: '03-1111-2222',
        openingHours: '10:00-20:00'
      },
      {
        id: 'store2',
        name: '新宿店',
        address: '東京都新宿区歌舞伎町1-1-1',
        manager: '鈴木店長',
        phone: '03-3333-4444',
        openingHours: '9:00-21:00'
      },
      {
        id: 'store3',
        name: '池袋店',
        address: '東京都豊島区南池袋1-1-1',
        manager: '佐々木店長',
        phone: '03-5555-6666',
        openingHours: '10:00-20:00'
      },
      {
        id: 'store4',
        name: '品川店',
        address: '東京都港区高輪1-1-1',
        manager: '田中店長',
        phone: '03-7777-8888',
        openingHours: '10:00-20:00'
      },
      {
        id: 'store5',
        name: '上野店',
        address: '東京都台東区上野1-1-1',
        manager: '中村店長',
        phone: '03-9999-0000',
        openingHours: '9:30-20:30'
      },
      {
        id: 'store6',
        name: '横浜店',
        address: '神奈川県横浜市西区1-1-1',
        manager: '伊藤店長',
        phone: '045-1111-2222',
        openingHours: '10:00-21:00'
      },
      {
        id: 'store7',
        name: '川崎店',
        address: '神奈川県川崎市川崎区1-1-1',
        manager: '松本店長',
        phone: '044-3333-4444',
        openingHours: '10:00-20:00'
      },
      {
        id: 'store8',
        name: '大宮店',
        address: '埼玉県さいたま市大宮区1-1-1',
        manager: '加藤店長',
        phone: '048-5555-6666',
        openingHours: '10:00-20:00'
      },
      {
        id: 'store9',
        name: '千葉店',
        address: '千葉県千葉市中央区1-1-1',
        manager: '斉藤店長',
        phone: '043-7777-8888',
        openingHours: '10:00-20:00'
      },
      {
        id: 'store10',
        name: '立川店',
        address: '東京都立川市1-1-1',
        manager: '小林店長',
        phone: '042-9999-0000',
        openingHours: '10:00-20:00'
      }
    ],
    layers: {
      layer1: [
        { 
          id: 'L1-1', 
          name: '田中太郎', 
          position: '営業部長', 
          phone: '03-1234-5678', 
          email: 'tanaka@abc-agency.com',
          assignedStores: ['store1', 'store2', 'store3', 'store4', 'store5']
          // レイヤー1は最上位なのでparentLayerPersonIdなし
        },
        { 
          id: 'L1-2', 
          name: '伊藤花子', 
          position: '取締役', 
          phone: '03-1234-5670', 
          email: 'ito@abc-agency.com',
          assignedStores: ['store6', 'store7', 'store8', 'store9', 'store10']
          // レイヤー1は最上位なのでparentLayerPersonIdなし
        }
      ],
      layer2: [
        { 
          id: 'L2-1', 
          name: '佐藤次郎', 
          position: '営業課長', 
          phone: '03-1234-5679', 
          email: 'sato@abc-agency.com',
          assignedStores: ['store1', 'store2'],
          parentLayerPersonId: 'L1-1' // 田中部長配下
        },
        { 
          id: 'L2-2', 
          name: '高橋三郎', 
          position: '営業課長', 
          phone: '03-1234-5672', 
          email: 'takahashi@abc-agency.com',
          assignedStores: ['store3', 'store4', 'store5'],
          parentLayerPersonId: 'L1-1' // 田中部長配下
        },
        { 
          id: 'L2-3', 
          name: '山下美咲', 
          position: '営業課長', 
          phone: '03-1234-5673', 
          email: 'yamashita@abc-agency.com',
          assignedStores: ['store6', 'store7'],
          parentLayerPersonId: 'L1-2' // 伊藤取締役配下
        },
        { 
          id: 'L2-4', 
          name: '林健太', 
          position: '営業課長', 
          phone: '03-1234-5674', 
          email: 'hayashi@abc-agency.com',
          assignedStores: ['store8', 'store9', 'store10'],
          parentLayerPersonId: 'L1-2' // 伊藤取締役配下
        }
      ],
      layer3: [
        { 
          id: 'L3-1', 
          name: '鈴木一郎', 
          position: '営業主任', 
          phone: '03-1234-5680', 
          assignedStores: ['store1', 'store2'],
          parentLayerPersonId: 'L2-1' // 佐藤課長配下
        },
        { 
          id: 'L3-2', 
          name: '吉田美穂', 
          position: '営業主任', 
          phone: '03-1234-5681', 
          assignedStores: ['store3', 'store4', 'store5'],
          parentLayerPersonId: 'L2-2' // 高橋課長配下
        },
        { 
          id: 'L3-3', 
          name: '渡辺拓也', 
          position: '営業主任', 
          phone: '03-1234-5682', 
          assignedStores: ['store6', 'store7'],
          parentLayerPersonId: 'L2-3' // 山下課長配下
        },
        { 
          id: 'L3-4', 
          name: '新井明', 
          position: '営業主任', 
          phone: '03-1234-5683', 
          assignedStores: ['store8', 'store9', 'store10'],
          parentLayerPersonId: 'L2-4' // 林課長配下
        }
      ],
      layer4: [
        { 
          id: 'L4-1', 
          name: '山田真一', 
          position: '渋谷店店長', 
          phone: '03-1111-2222', 
          assignedStores: ['store1'],
          parentLayerPersonId: 'L3-1' // 鈴木主任配下
        },
        { 
          id: 'L4-2', 
          name: '鈴木清美', 
          position: '新宿店店長', 
          phone: '03-3333-4444', 
          assignedStores: ['store2'],
          parentLayerPersonId: 'L3-1' // 鈴木主任配下
        },
        { 
          id: 'L4-3', 
          name: '佐々木康夫', 
          position: '池袋店店長', 
          phone: '03-5555-6666', 
          assignedStores: ['store3'],
          parentLayerPersonId: 'L3-2' // 吉田主任配下
        },
        { 
          id: 'L4-4', 
          name: '田中麻由美', 
          position: '品川店店長', 
          phone: '03-7777-8888', 
          assignedStores: ['store4'],
          parentLayerPersonId: 'L3-2' // 吉田主任配下
        },
        { 
          id: 'L4-5', 
          name: '中村雅之', 
          position: '上野店店長', 
          phone: '03-9999-0000', 
          assignedStores: ['store5'],
          parentLayerPersonId: 'L3-2' // 吉田主任配下に変更
        },
        { 
          id: 'L4-6', 
          name: '伊藤龍男', 
          position: '横浜店店長', 
          phone: '045-1111-2222', 
          assignedStores: ['store6'],
          parentLayerPersonId: 'L3-3' // 渡辺主任配下
        },
        { 
          id: 'L4-7', 
          name: '松本友香', 
          position: '川崎店店長', 
          phone: '044-3333-4444', 
          assignedStores: ['store7'],
          parentLayerPersonId: 'L3-3' // 渡辺主任配下
        },
        { 
          id: 'L4-8', 
          name: '加藤浩二', 
          position: '大宮店店長', 
          phone: '048-5555-6666', 
          assignedStores: ['store8'],
          parentLayerPersonId: 'L3-4' // 新井主任配下
        },
        { 
          id: 'L4-9', 
          name: '斉藤恵子', 
          position: '千葉店店長', 
          phone: '043-7777-8888', 
          assignedStores: ['store9'],
          parentLayerPersonId: 'L3-4' // 新井主任配下
        },
        { 
          id: 'L4-10', 
          name: '小林光男', 
          position: '立川店店長', 
          phone: '042-9999-0000', 
          assignedStores: ['store10'],
          parentLayerPersonId: 'L3-4' // 新井主任配下
        }
      ],
    },
  },
  {
    id: '2',
    companyName: 'DEF代理店',
    address: '大阪府大阪市北区梅田1-1-1',
    stores: [
      // 関西エリア (10店舗)
      { id: 'def_store1', name: '梅田店', address: '大阪府大阪市北区梅田1-2-3', phone: '06-1111-2222' },
      { id: 'def_store2', name: '難波店', address: '大阪府大阪市中央区難波1-2-3', phone: '06-3333-4444' },
      { id: 'def_store3', name: '天王寺店', address: '大阪府大阪市天王寺区1-2-3', phone: '06-5555-6666' },
      { id: 'def_store4', name: '京都店', address: '京都府京都市中京区1-2-3', phone: '075-7777-8888' },
      { id: 'def_store5', name: '神戸店', address: '兵庫県神戸市中央区1-2-3', phone: '078-9999-0000' },
      { id: 'def_store6', name: '奈良店', address: '奈良県奈良市1-2-3', phone: '0742-1111-2222' },
      { id: 'def_store7', name: '和歌山店', address: '和歌山県和歌山市1-2-3', phone: '073-3333-4444' },
      { id: 'def_store8', name: '堺店', address: '大阪府堺市堺区1-2-3', phone: '072-5555-6666' },
      { id: 'def_store9', name: '岸和田店', address: '大阪府岸和田市1-2-3', phone: '072-7777-8888' },
      { id: 'def_store10', name: '枚方店', address: '大阪府枚方市1-2-3', phone: '072-9999-0000' },
      // 中部エリア (10店舗)
      { id: 'def_store11', name: '名古屋店', address: '愛知県名古屋市中区栄1-2-3', phone: '052-1111-2222' },
      { id: 'def_store12', name: '金山店', address: '愛知県名古屋市中区金山1-2-3', phone: '052-3333-4444' },
      { id: 'def_store13', name: '豊橋店', address: '愛知県豊橋市1-2-3', phone: '0532-5555-6666' },
      { id: 'def_store14', name: '岡崎店', address: '愛知県岡崎市1-2-3', phone: '0564-7777-8888' },
      { id: 'def_store15', name: '静岡店', address: '静岡県静岡市葵区1-2-3', phone: '054-9999-0000' },
      { id: 'def_store16', name: '浜松店', address: '静岡県浜松市中区1-2-3', phone: '053-1111-2222' },
      { id: 'def_store17', name: '岐阜店', address: '岐阜県岐阜市1-2-3', phone: '058-3333-4444' },
      { id: 'def_store18', name: '津店', address: '三重県津市1-2-3', phone: '059-5555-6666' },
      { id: 'def_store19', name: '四日市店', address: '三重県四日市市1-2-3', phone: '059-7777-8888' },
      { id: 'def_store20', name: '富山店', address: '富山県富山市1-2-3', phone: '076-9999-0000' }
    ],
    layers: {
      layer1: [
        { 
          id: 'DEF_L1-1', 
          name: '森田誠', 
          position: '西日本統括部長', 
          phone: '06-1000-0001', 
          email: 'morita@def-agency.com',
          assignedStores: ['def_store1', 'def_store2', 'def_store3', 'def_store4', 'def_store5', 'def_store6', 'def_store7', 'def_store8', 'def_store9', 'def_store10']
        },
        { 
          id: 'DEF_L1-2', 
          name: '中島麻衣', 
          position: '中部統括部長', 
          phone: '052-1000-0002', 
          email: 'nakajima@def-agency.com',
          assignedStores: ['def_store11', 'def_store12', 'def_store13', 'def_store14', 'def_store15', 'def_store16', 'def_store17', 'def_store18', 'def_store19', 'def_store20']
        }
      ],
      layer2: [
        { 
          id: 'DEF_L2-1', 
          name: '井上康夫', 
          position: '関西営業部長', 
          phone: '06-2000-0001', 
          email: 'inoue@def-agency.com',
          assignedStores: ['def_store1', 'def_store2', 'def_store3', 'def_store4', 'def_store5'],
          parentLayerPersonId: 'DEF_L1-1'
        },
        { 
          id: 'DEF_L2-2', 
          name: '小川真理子', 
          position: '関西南部営業部長', 
          phone: '06-2000-0002', 
          email: 'ogawa@def-agency.com',
          assignedStores: ['def_store6', 'def_store7', 'def_store8', 'def_store9', 'def_store10'],
          parentLayerPersonId: 'DEF_L1-1'
        },
        { 
          id: 'DEF_L2-3', 
          name: '藤田雄一', 
          position: '中部営業部長', 
          phone: '052-2000-0003', 
          email: 'fujita@def-agency.com',
          assignedStores: ['def_store11', 'def_store12', 'def_store13', 'def_store14', 'def_store15'],
          parentLayerPersonId: 'DEF_L1-2'
        },
        { 
          id: 'DEF_L2-4', 
          name: '松井由香', 
          position: '中部北陸営業部長', 
          phone: '052-2000-0004', 
          email: 'matsui@def-agency.com',
          assignedStores: ['def_store16', 'def_store17', 'def_store18', 'def_store19', 'def_store20'],
          parentLayerPersonId: 'DEF_L1-2'
        }
      ],
      layer3: [
        { 
          id: 'DEF_L3-1', 
          name: '岡本修二', 
          position: '大阪営業課長', 
          phone: '06-3000-0001',
          assignedStores: ['def_store1', 'def_store2', 'def_store3'],
          parentLayerPersonId: 'DEF_L2-1'
        },
        { 
          id: 'DEF_L3-2', 
          name: '山口恵子', 
          position: '京都営業課長', 
          phone: '075-3000-0002',
          assignedStores: ['def_store4', 'def_store5'],
          parentLayerPersonId: 'DEF_L2-1'
        },
        { 
          id: 'DEF_L3-3', 
          name: '橋本大介', 
          position: '南大阪営業課長', 
          phone: '072-3000-0003',
          assignedStores: ['def_store6', 'def_store7', 'def_store8'],
          parentLayerPersonId: 'DEF_L2-2'
        },
        { 
          id: 'DEF_L3-4', 
          name: '野村千春', 
          position: '和歌山営業課長', 
          phone: '073-3000-0004',
          assignedStores: ['def_store9', 'def_store10'],
          parentLayerPersonId: 'DEF_L2-2'
        },
        { 
          id: 'DEF_L3-5', 
          name: '田村健介', 
          position: '愛知営業課長', 
          phone: '052-3000-0005',
          assignedStores: ['def_store11', 'def_store12', 'def_store13'],
          parentLayerPersonId: 'DEF_L2-3'
        },
        { 
          id: 'DEF_L3-6', 
          name: '木村亜由美', 
          position: '東海営業課長', 
          phone: '0532-3000-0006',
          assignedStores: ['def_store14', 'def_store15'],
          parentLayerPersonId: 'DEF_L2-3'
        },
        { 
          id: 'DEF_L3-7', 
          name: '上田浩司', 
          position: '静岡営業課長', 
          phone: '054-3000-0007',
          assignedStores: ['def_store16', 'def_store17'],
          parentLayerPersonId: 'DEF_L2-4'
        },
        { 
          id: 'DEF_L3-8', 
          name: '清水雅美', 
          position: '北陸営業課長', 
          phone: '076-3000-0008',
          assignedStores: ['def_store18', 'def_store19', 'def_store20'],
          parentLayerPersonId: 'DEF_L2-4'
        }
      ],
      layer4: [
        { id: 'DEF_L4-1', name: '平田太一', position: '店長', phone: '06-4000-0001', assignedStores: ['def_store1'], parentLayerPersonId: 'DEF_L3-1' },
        { id: 'DEF_L4-2', name: '西川明美', position: '店長', phone: '06-4000-0002', assignedStores: ['def_store2'], parentLayerPersonId: 'DEF_L3-1' },
        { id: 'DEF_L4-3', name: '石井隆志', position: '店長', phone: '06-4000-0003', assignedStores: ['def_store3'], parentLayerPersonId: 'DEF_L3-1' },
        { id: 'DEF_L4-4', name: '永井りえ', position: '店長', phone: '075-4000-0004', assignedStores: ['def_store4'], parentLayerPersonId: 'DEF_L3-2' },
        { id: 'DEF_L4-5', name: '長谷川光男', position: '店長', phone: '078-4000-0005', assignedStores: ['def_store5'], parentLayerPersonId: 'DEF_L3-2' },
        { id: 'DEF_L4-6', name: '河野美智子', position: '店長', phone: '0742-4000-0006', assignedStores: ['def_store6'], parentLayerPersonId: 'DEF_L3-3' },
        { id: 'DEF_L4-7', name: '加々美達也', position: '店長', phone: '073-4000-0007', assignedStores: ['def_store7'], parentLayerPersonId: 'DEF_L3-3' },
        { id: 'DEF_L4-8', name: '宮本和子', position: '店長', phone: '072-4000-0008', assignedStores: ['def_store8'], parentLayerPersonId: 'DEF_L3-3' },
        { id: 'DEF_L4-9', name: '古川博文', position: '店長', phone: '072-4000-0009', assignedStores: ['def_store9'], parentLayerPersonId: 'DEF_L3-4' },
        { id: 'DEF_L4-10', name: '村上綾乃', position: '店長', phone: '072-4000-0010', assignedStores: ['def_store10'], parentLayerPersonId: 'DEF_L3-4' },
        { id: 'DEF_L4-11', name: '今井正人', position: '店長', phone: '052-4000-0011', assignedStores: ['def_store11'], parentLayerPersonId: 'DEF_L3-5' },
        { id: 'DEF_L4-12', name: '青木香織', position: '店長', phone: '052-4000-0012', assignedStores: ['def_store12'], parentLayerPersonId: 'DEF_L3-5' },
        { id: 'DEF_L4-13', name: '内田勝', position: '店長', phone: '0532-4000-0013', assignedStores: ['def_store13'], parentLayerPersonId: 'DEF_L3-5' },
        { id: 'DEF_L4-14', name: '矢野晴美', position: '店長', phone: '0564-4000-0014', assignedStores: ['def_store14'], parentLayerPersonId: 'DEF_L3-6' },
        { id: 'DEF_L4-15', name: '近藤英雄', position: '店長', phone: '054-4000-0015', assignedStores: ['def_store15'], parentLayerPersonId: 'DEF_L3-6' },
        { id: 'DEF_L4-16', name: '斎藤真紀', position: '店長', phone: '053-4000-0016', assignedStores: ['def_store16'], parentLayerPersonId: 'DEF_L3-7' },
        { id: 'DEF_L4-17', name: '武田信二', position: '店長', phone: '058-4000-0017', assignedStores: ['def_store17'], parentLayerPersonId: 'DEF_L3-7' },
        { id: 'DEF_L4-18', name: '坂本里美', position: '店長', phone: '059-4000-0018', assignedStores: ['def_store18'], parentLayerPersonId: 'DEF_L3-8' },
        { id: 'DEF_L4-19', name: '三浦克己', position: '店長', phone: '059-4000-0019', assignedStores: ['def_store19'], parentLayerPersonId: 'DEF_L3-8' },
        { id: 'DEF_L4-20', name: '江口みゆき', position: '店長', phone: '076-4000-0020', assignedStores: ['def_store20'], parentLayerPersonId: 'DEF_L3-8' }
      ]
    }
  }
];

const sampleLocations: EventLocationData[] = [
  {
    id: '1',
    agencyId: '1',
    address: '東京都渋谷区道玄坂2-6-8',
    locationName: '渋谷109',
    locationDetails: '1階エントランス特設会場、若年層の集客力が高い',
    locationDetailList: [
      {
        id: '1',
        name: '特設ブース'
      },
      {
        id: '2',
        name: '体験コーナー'
      }
    ],
    pricing: {
      tuesday: { closer: 15000, girl: 12000 },
      wednesday: { closer: 15000, girl: 12000 },
      thursday: { closer: 15000, girl: 12000 },
      friday: { closer: 16000, girl: 13000 },
      saturday: { closer: 18000, girl: 15000 },
      sunday: { closer: 18000, girl: 15000 },
      monday: { closer: 16000, girl: 13000 },
    },
  },
  {
    id: '2',
    agencyId: '1',
    address: '東京都江東区豊洲2-4-9',
    locationName: 'ららぽーと豊洲',
    locationDetails: '1階センターコート、ファミリー層の集客に最適',
    locationDetailList: [
      {
        id: '1',
        name: 'メインステージ'
      },
      {
        id: '2',
        name: '相談カウンター'
      },
      {
        id: '3',
        name: 'キッズスペース'
      }
    ],
    pricing: {
      tuesday: { closer: 14000, girl: 11000 },
      wednesday: { closer: 14000, girl: 11000 },
      thursday: { closer: 14000, girl: 11000 },
      friday: { closer: 15000, girl: 12000 },
      saturday: { closer: 17000, girl: 14000 },
      sunday: { closer: 17000, girl: 14000 },
      monday: { closer: 15000, girl: 12000 },
    },
  },
  {
    id: '3',
    agencyId: '1',
    address: '千葉県船橋市浜町2-2-7',
    locationName: 'イトーヨーカドー船橋店',
    locationDetails: '食品館入口横特設会場、地域密着型の立地',
    locationDetailList: [
      {
        id: '1',
        name: 'エントランスブース'
      },
      {
        id: '2',
        name: '商品展示エリア'
      }
    ],
    pricing: {
      tuesday: { closer: 13000, girl: 10000 },
      wednesday: { closer: 13000, girl: 10000 },
      thursday: { closer: 13000, girl: 10000 },
      friday: { closer: 14000, girl: 11000 },
      saturday: { closer: 16000, girl: 13000 },
      sunday: { closer: 16000, girl: 13000 },
      monday: { closer: 14000, girl: 11000 },
    },
  },
  {
    id: '4',
    agencyId: '2',
    address: '大阪府大阪市北区角田町7-10',
    locationName: 'イオンモール大阪ドームシティ',
    locationDetails: '1階グランドコート、大阪ドーム隣接で集客力抜群',
    locationDetailList: [
      {
        id: '1',
        name: 'グランドコート'
      },
      {
        id: '2', 
        name: 'サブステージ'
      },
      {
        id: '3',
        name: 'キャンペーンブース'
      }
    ],
    pricing: {
      tuesday: { closer: 16000, girl: 13000 },
      wednesday: { closer: 16000, girl: 13000 },
      thursday: { closer: 16000, girl: 13000 },
      friday: { closer: 17000, girl: 14000 },
      saturday: { closer: 19000, girl: 16000 },
      sunday: { closer: 19000, girl: 16000 },
      monday: { closer: 17000, girl: 14000 },
    },
  },
  {
    id: '5',
    agencyId: '2',
    address: '愛知県名古屋市中村区名駅1-1-4',
    locationName: 'JRセントラルタワーズ',
    locationDetails: '12階スカイストリート、名古屋駅直結でアクセス抜群',
    locationDetailList: [
      {
        id: '1',
        name: 'スカイステージ'
      },
      {
        id: '2',
        name: 'イベントスペース'
      }
    ],
    pricing: {
      tuesday: { closer: 15500, girl: 12500 },
      wednesday: { closer: 15500, girl: 12500 },
      thursday: { closer: 15500, girl: 12500 },
      friday: { closer: 16500, girl: 13500 },
      saturday: { closer: 18500, girl: 15500 },
      sunday: { closer: 18500, girl: 15500 },
      monday: { closer: 16500, girl: 13500 },
    },
  },
  {
    id: '6',
    agencyId: '2',
    address: '京都府京都市下京区烏丸通七条下ル',
    locationName: 'イオンモールKYOTO',
    locationDetails: '京都駅前、観光客と地元客の両方を狙える立地',
    locationDetailList: [
      {
        id: '1',
        name: 'センターコート'
      },
      {
        id: '2',
        name: '体験ブース'
      },
      {
        id: '3',
        name: 'フォトスポット'
      }
    ],
    pricing: {
      tuesday: { closer: 14500, girl: 11500 },
      wednesday: { closer: 14500, girl: 11500 },
      thursday: { closer: 14500, girl: 11500 },
      friday: { closer: 15500, girl: 12500 },
      saturday: { closer: 17500, girl: 14500 },
      sunday: { closer: 17500, girl: 14500 },
      monday: { closer: 15500, girl: 12500 },
    },
  },
];

const weekdays = [
  { key: 'tuesday', label: '火曜日' },
  { key: 'wednesday', label: '水曜日' },
  { key: 'thursday', label: '木曜日' },
  { key: 'friday', label: '金曜日' },
  { key: 'saturday', label: '土曜日' },
  { key: 'sunday', label: '日曜日' },
  { key: 'monday', label: '月曜日' },
];

// 下位タブの型定義
type SubTabValue = 'stores' | 'events' | 'layers' | 'organization';

export const ProjectManagement: React.FC = () => {
  // 上位タブ（代理店選択）の状態
  const [selectedAgencyId, setSelectedAgencyId] = useState<string | null>(null);
  // 下位タブの状態
  const [subTabValue, setSubTabValue] = useState<SubTabValue>('stores');
  const [agencies, setAgencies] = useState<AgencyData[]>(sampleAgencies);
  const [locations, setLocations] = useState<EventLocationData[]>(sampleLocations);
  
  // ダイアログ状態
  const [agencyDialogOpen, setAgencyDialogOpen] = useState(false);
  const [locationDialogOpen, setLocationDialogOpen] = useState(false);
  const [storeDialogOpen, setStoreDialogOpen] = useState(false);
  const [layerDialogOpen, setLayerDialogOpen] = useState(false);
  const [orgChartDialogOpen, setOrgChartDialogOpen] = useState(false);
  
  const [editingAgency, setEditingAgency] = useState<AgencyData | null>(null);
  const [editingLocation, setEditingLocation] = useState<EventLocationData | null>(null);
  const [editingStore, setEditingStore] = useState<Store | null>(null);
  const [editingLayer, setEditingLayer] = useState<'layer1' | 'layer2' | 'layer3' | 'layer4' | null>(null);
  const [editingLayerPerson, setEditingLayerPerson] = useState<LayerPerson | null>(null);
  
  // フォームデータ
  const [agencyData, setAgencyData] = useState<Omit<AgencyData, 'id'>>(initialAgencyData);
  const [locationData, setLocationData] = useState<Omit<EventLocationData, 'id'>>(initialLocationData);
  const [storeData, setStoreData] = useState<Omit<Store, 'id'>>({
    name: '',
    address: '',
    manager: '',
    phone: '',
    openingHours: ''
  });
  const [layerPersonData, setLayerPersonData] = useState<Omit<LayerPerson, 'id'>>({
    name: '',
    position: '',
    phone: '',
    email: '',
    assignedStores: [],
    parentLayerPersonId: undefined
  });
  
  // 場所詳細管理（複数入力フィールド対応）
  const [locationDetailInputs, setLocationDetailInputs] = useState<Array<Omit<LocationDetail, 'id'> & { tempId: string }>>([]);
  
  const [saveMessage, setSaveMessage] = useState<string>('');
  const [selectedAgencyForManagement, setSelectedAgencyForManagement] = useState<string>('');

  const handleSaveAgency = () => {
    if (editingAgency) {
      setAgencies(prev => prev.map(agency => 
        agency.id === editingAgency.id ? { ...agency, ...agencyData } : agency
      ));
      setSaveMessage('代理店情報を更新しました');
    } else {
      const newAgency: AgencyData = {
        id: Date.now().toString(),
        ...agencyData,
      };
      setAgencies(prev => [...prev, newAgency]);
      setSaveMessage('新しい代理店を追加しました');
    }
    
    setAgencyDialogOpen(false);
    setTimeout(() => setSaveMessage(''), 3000);
  };

  const handleSaveLocation = () => {
    // 場所詳細を処理
    const finalLocationDetailList = processLocationDetails();
    const finalLocationData = {
      ...locationData,
      locationDetailList: finalLocationDetailList,
    };

    if (editingLocation) {
      setLocations(prev => prev.map(location => 
        location.id === editingLocation.id ? { ...location, ...finalLocationData } : location
      ));
      setSaveMessage('イベント場所情報を更新しました');
    } else {
      const newLocation: EventLocationData = {
        id: Date.now().toString(),
        ...finalLocationData,
      };
      setLocations(prev => [...prev, newLocation]);
      setSaveMessage('新しいイベント場所を追加しました');
    }
    
    // フォームをリセット
    setLocationDetailInputs([]);
    setLocationDialogOpen(false);
    setTimeout(() => setSaveMessage(''), 3000);
  };

  const handleSaveLayerPerson = () => {
    if (!selectedAgencyForManagement || !editingLayer) return;
    if (!layerPersonData.name.trim() || !layerPersonData.position.trim() || !layerPersonData.phone.trim()) {
      alert('名前、役職、電話番号は必須項目です');
      return;
    }

    const newPerson: LayerPerson = {
      id: editingLayerPerson?.id || `L${editingLayer.slice(-1)}-${Date.now()}`,
      name: layerPersonData.name.trim(),
      position: layerPersonData.position.trim(),
      phone: layerPersonData.phone.trim(),
      email: layerPersonData.email.trim() || undefined,
      assignedStores: [...layerPersonData.assignedStores],
      parentLayerPersonId: layerPersonData.parentLayerPersonId
    };

    setAgencies(prev => prev.map(agency => 
      agency.id === selectedAgencyForManagement
        ? {
            ...agency,
            layers: {
              ...agency.layers,
              [editingLayer]: editingLayerPerson
                ? agency.layers[editingLayer].map(person => 
                    person.id === editingLayerPerson.id ? newPerson : person
                  )
                : [...agency.layers[editingLayer], newPerson]
            }
          }
        : agency
    ));

    setSaveMessage(editingLayerPerson ? 'レイヤー人員を更新しました' : 'レイヤー人員を追加しました');
    setLayerDialogOpen(false);
    setEditingLayer(null);
    setEditingLayerPerson(null);
    setLayerPersonData({
      name: '',
      position: '',
      phone: '',
      email: '',
      assignedStores: [],
      parentLayerPersonId: undefined
    });
    setTimeout(() => setSaveMessage(''), 3000);
  };

  const handleSaveStore = () => {
    if (!selectedAgencyForManagement) return;
    if (!storeData.name.trim() || !storeData.address.trim() || !storeData.phone.trim()) {
      alert('すべての項目を入力してください');
      return;
    }

    const newStore: Store = {
      id: editingStore?.id || `store-${Date.now()}`,
      name: storeData.name.trim(),
      address: storeData.address.trim(),
      phone: storeData.phone.trim()
    };

    setAgencies(prev => prev.map(agency => 
      agency.id === selectedAgencyForManagement
        ? {
            ...agency,
            stores: editingStore
              ? agency.stores.map(store => 
                  store.id === editingStore.id ? newStore : store
                )
              : [...agency.stores, newStore]
          }
        : agency
    ));

    setSaveMessage(editingStore ? '店舗を更新しました' : '店舗を追加しました');
    setStoreDialogOpen(false);
    setEditingStore(null);
    setStoreData({
      name: '',
      address: '',
      phone: ''
    });
    setTimeout(() => setSaveMessage(''), 3000);
  };

  const handleEditAgency = (agency: AgencyData) => {
    setEditingAgency(agency);
    setAgencyData({
      companyName: agency.companyName,
      address: agency.address,
      layers: { ...agency.layers },
    });
    setAgencyDialogOpen(true);
  };

  const handleEditLocation = (location: EventLocationData) => {
    setEditingLocation(location);
    setLocationData({
      agencyId: location.agencyId,
      address: location.address,
      locationName: location.locationName,
      locationDetails: location.locationDetails,
      locationDetailList: [...location.locationDetailList],
      pricing: { ...location.pricing },
    });
    
    // 編集時は新規入力フィールドを空にする
    setLocationDetailInputs([]);
    setLocationDialogOpen(true);
  };

  // 場所詳細管理関数
  const handleAddLocationDetailInput = () => {
    const newTempId = Date.now().toString();
    setLocationDetailInputs(prev => [
      ...prev,
      { tempId: newTempId, name: '' }
    ]);
  };

  const handleRemoveLocationDetailInput = (tempId: string) => {
    setLocationDetailInputs(prev => prev.filter(input => input.tempId !== tempId));
  };

  const handleLocationDetailInputChange = (tempId: string, field: keyof Omit<LocationDetail, 'id'>, value: string) => {
    setLocationDetailInputs(prev => prev.map(input => 
      input.tempId === tempId 
        ? { ...input, [field]: value }
        : input
    ));
  };

  const handleRemoveExistingLocationDetail = (detailId: string) => {
    setLocationData(prev => ({
      ...prev,
      locationDetailList: prev.locationDetailList.filter(detail => detail.id !== detailId),
    }));
  };

  // 場所詳細を保存時に処理
  const processLocationDetails = () => {
    const validInputs = locationDetailInputs.filter(input => input.name.trim() !== '');
    const newDetails: LocationDetail[] = validInputs.map(input => ({
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      name: input.name,
    }));

    return [...locationData.locationDetailList, ...newDetails];
  };

  const getAgencyName = (agencyId: string) => {
    return agencies.find(agency => agency.id === agencyId)?.companyName || '不明';
  };

  return (
    <Box sx={{ maxWidth: 1200 }}>
      <Typography variant="h5" gutterBottom color="primary" sx={{ mb: 3 }}>
        <CampaignIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
        代理店・イベント管理
      </Typography>

      {saveMessage && (
        <Alert severity="success" sx={{ mb: 3 }}>
          {saveMessage}
        </Alert>
      )}

      {/* 2段階タブナビゲーション */}
      {/* 上位タブ: 代理店選択 */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}>
        <Typography variant="h6" sx={{ mb: 2, color: 'primary.main' }}>
          <BusinessIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
          代理店選択
        </Typography>
        <Tabs 
          value={selectedAgencyId || false} 
          onChange={(e, newValue) => {
            setSelectedAgencyId(newValue);
            // 代理店選択時は店舗マスタを初期表示
            setSubTabValue('stores');
          }}
          variant="scrollable"
          scrollButtons="auto"
        >
          {agencies.map((agency) => (
            <Tab 
              key={agency.id}
              value={agency.id}
              label={agency.companyName}
              icon={<BusinessIcon />} 
              iconPosition="start"
            />
          ))}
        </Tabs>
      </Box>

      {/* 下位タブ: 機能選択 */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
        <Typography variant="subtitle1" sx={{ mb: 2, color: 'text.secondary' }}>
          管理機能
        </Typography>
        <Tabs 
          value={subTabValue} 
          onChange={(e, newValue) => setSubTabValue(newValue)}
          sx={{
            '& .MuiTab-root': {
              opacity: selectedAgencyId ? 1 : 0.5,
              pointerEvents: selectedAgencyId ? 'auto' : 'none',
              transition: 'opacity 0.3s ease',
            }
          }}
        >
          <Tab 
            value="stores"
            label="店舗マスタ" 
            icon={<StoreIcon />} 
            iconPosition="start"
          />
          <Tab 
            value="events"
            label="イベントマスタ" 
            icon={<CampaignIcon />} 
            iconPosition="start"
          />
          <Tab 
            value="layers"
            label="レイヤー管理" 
            icon={<PeopleIcon />} 
            iconPosition="start"
          />
          <Tab 
            value="organization"
            label="組織図" 
            icon={<AccountTreeIcon />} 
            iconPosition="start"
          />
        </Tabs>
      </Box>

      {/* 代理店未選択時のメッセージ */}
      {!selectedAgencyId && (
        <Card sx={{ textAlign: 'center', py: 6 }}>
          <CardContent>
            <BusinessIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
            <Typography variant="h6" color="text.secondary" gutterBottom>
              代理店を選択してください
            </Typography>
            <Typography variant="body2" color="text.secondary">
              上部のタブから管理したい代理店を選択すると、該当代理店の管理機能が利用できます。
            </Typography>
          </CardContent>
        </Card>
      )}

      {/* 選択された代理店の情報表示 */}
      {selectedAgencyId && (
        <>
          {/* 選択代理店情報バー */}
          <Card sx={{ mb: 3, bgcolor: 'primary.50' }}>
            <CardContent sx={{ py: 2 }}>
              <Typography variant="subtitle1" color="primary.main">
                <BusinessIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                現在の管理対象: {agencies.find(a => a.id === selectedAgencyId)?.companyName}
              </Typography>
            </CardContent>
          </Card>

          {/* 下位タブコンテンツ */}
          {subTabValue === 'stores' && renderStoreManagement()}
          {subTabValue === 'events' && renderEventManagement()}
          {subTabValue === 'layers' && renderLayerManagement()}
          {subTabValue === 'organization' && renderOrganizationChart()}
        </>
      )}
    </Box>
  );

  // レンダリング関数群
  const renderStoreManagement = () => {
    const selectedAgency = agencies.find(a => a.id === selectedAgencyId);
    if (!selectedAgency) return null;

    return (
      <Card>
        <CardHeader 
          title="店舗マスタ管理"
          subheader={`${selectedAgency.companyName} の店舗情報管理`}
        />
        <CardContent>
          <Typography>店舗マスタの内容がここに表示されます</Typography>
          {/* TODO: 実際の店舗管理コンテンツを実装 */}
        </CardContent>
      </Card>
    );
  };

  const renderEventManagement = () => {
    const selectedAgency = agencies.find(a => a.id === selectedAgencyId);
    if (!selectedAgency) return null;

    return (
      <Card>
        <CardHeader 
          title="イベントマスタ管理"
          subheader={`${selectedAgency.companyName} のイベント情報管理`}
        />
        <CardContent>
          <Typography>イベントマスタの内容がここに表示されます</Typography>
          {/* TODO: 実際のイベント管理コンテンツを実装 */}
        </CardContent>
      </Card>
    );
  };

  const renderLayerManagement = () => {
    const selectedAgency = agencies.find(a => a.id === selectedAgencyId);
    if (!selectedAgency) return null;

    return (
      <Card>
        <CardHeader 
          title="レイヤー管理"
          subheader={`${selectedAgency.companyName} の階層管理`}
        />
        <CardContent>
          <Typography>レイヤー管理の内容がここに表示されます</Typography>
          {/* TODO: 実際のレイヤー管理コンテンツを実装 */}
        </CardContent>
      </Card>
    );
  };

  const renderOrganizationChart = () => {
    const selectedAgency = agencies.find(a => a.id === selectedAgencyId);
    if (!selectedAgency) return null;

    return (
      <Card>
        <CardHeader 
          title="組織図"
          subheader={`${selectedAgency.companyName} の組織構造`}
        />
        <CardContent>
          <Typography>組織図の内容がここに表示されます</Typography>
          {/* TODO: 実際の組織図コンテンツを実装 */}
        </CardContent>
      </Card>
    );
  };

export default ProjectManagement;
                      {agency.companyName}
                    </Typography>
                    <IconButton
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleEditAgency(agency);
                      }}
                      color="primary"
                    >
                      <EditIcon />
                    </IconButton>
                  </Box>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle2" gutterBottom>基本情報</Typography>
                      <Typography variant="body2"><strong>住所:</strong> {agency.address}</Typography>
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle2" gutterBottom>階層管理</Typography>
                      {Object.entries(agency.layers).map(([layerKey, layerPeople]) => (
                        <Box key={layerKey} sx={{ mb: 2 }}>
                          <Typography variant="body2" sx={{ fontWeight: 'bold', mb: 1 }}>
                            {layerKey.replace('layer', 'レイヤー')}:
                          </Typography>
                          {layerPeople.length > 0 ? (
                            layerPeople.map((person, index) => (
                              <Box key={person.id} sx={{ ml: 2, mb: 0.5 }}>
                                <Typography variant="body2" sx={{ fontSize: '0.875rem' }}>
                                  {index + 1}. {person.name} ({person.position}) - {person.phone}
                                  {person.assignedStores.length > 0 && (
                                    <Typography component="span" sx={{ color: 'text.secondary', fontSize: '0.75rem', ml: 1 }}>
                                      [担当店舗: {person.assignedStores.length}店舗]
                                    </Typography>
                                  )}
                                </Typography>
                              </Box>
                            ))
                          ) : (
                            <Typography variant="body2" sx={{ ml: 2, color: 'text.secondary', fontSize: '0.875rem' }}>
                              未登録
                            </Typography>
                          )}
                        </Box>
                      ))}
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>
            ))}
          </CardContent>
        </Card>
      )}

      {/* 店舗マスタタブ */}
      {tabValue === 1 && (
        <Card>
          <CardHeader 
            title="店舗マスタ"
            subheader="代理店店舗の登録・管理"
            action={
              <Box sx={{ display: 'flex', gap: 2 }}>
                <FormControl sx={{ minWidth: 200 }}>
                  <InputLabel>代理店選択</InputLabel>
                  <Select
                    value={selectedAgencyForManagement}
                    label="代理店選択"
                    onChange={(e) => setSelectedAgencyForManagement(e.target.value)}
                  >
                    {agencies.map((agency) => (
                      <MenuItem key={agency.id} value={agency.id}>
                        {agency.companyName}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                {selectedAgencyForManagement && (
                  <Button
                    variant="contained"
                    startIcon={<AddIcon />}
                    onClick={() => {
                      setEditingStore(null);
                      setStoreData({
                        name: '',
                        address: '',
                        manager: '',
                        phone: '',
                        openingHours: ''
                      });
                      setStoreDialogOpen(true);
                    }}
                  >
                    店舗追加
                  </Button>
                )}
              </Box>
            }
          />
          <CardContent>
            {selectedAgencyForManagement ? (
              (() => {
                const selectedAgency = agencies.find(a => a.id === selectedAgencyForManagement);
                return selectedAgency ? (
                  <>
                    <Box sx={{ mb: 3, display: 'flex', justifyContent: 'flex-end' }}>
                      <Button
                        variant="contained"
                        startIcon={<AddIcon />}
                        onClick={() => {
                          setEditingStore(null);
                          setStoreData({
                            name: '',
                            address: '',
                            phone: ''
                          });
                          setStoreDialogOpen(true);
                        }}
                      >
                        店舗追加
                      </Button>
                    </Box>
                    {selectedAgency.stores.length === 0 ? (
                      <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                        この代理店にはまだ店舗が登録されていません
                      </Typography>
                    ) : (
                      selectedAgency.stores.map((store) => (
                        <Accordion key={store.id} sx={{ mb: 2 }}>
                          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                            <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                              <StoreIcon sx={{ mr: 2, color: 'primary.main' }} />
                              <Typography variant="h6" sx={{ flexGrow: 1 }}>
                                {store.name}
                              </Typography>
                              <Box sx={{ display: 'flex', gap: 1 }}>
                                <IconButton
                                  size="small"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    setEditingStore(store);
                                    setStoreData({
                                      name: store.name,
                                      address: store.address,
                                      phone: store.phone
                                    });
                                    setStoreDialogOpen(true);
                                  }}
                                >
                                  <EditIcon />
                                </IconButton>
                                <IconButton
                                  size="small"
                                  color="error"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    if (confirm('この店舗を削除しますか？')) {
                                      setAgencies(prev => prev.map(agency => 
                                        agency.id === selectedAgencyForManagement
                                          ? {
                                              ...agency,
                                              stores: agency.stores.filter(s => s.id !== store.id)
                                            }
                                          : agency
                                      ));
                                      setSaveMessage('店舗を削除しました');
                                      setTimeout(() => setSaveMessage(''), 3000);
                                    }
                                  }}
                                >
                                  <DeleteIcon />
                                </IconButton>
                              </Box>
                            </Box>
                          </AccordionSummary>
                          <AccordionDetails>
                            <Grid container spacing={2}>
                              <Grid item xs={12} md={6}>
                                <Typography variant="body2"><strong>住所:</strong> {store.address}</Typography>
                                <Typography variant="body2"><strong>電話番号:</strong> {store.phone}</Typography>
                              </Grid>
                              <Grid item xs={12} md={6}>
                                {(() => {
                                  const manager = selectedAgency.layers.layer4?.find(person => 
                                    person.assignedStores.includes(store.id)
                                  );
                                  return manager ? (
                                    <>
                                      <Typography variant="body2"><strong>店舗責任者:</strong> {manager.name}</Typography>
                                      <Typography variant="body2"><strong>責任者役職:</strong> {manager.position}</Typography>
                                      <Typography variant="body2"><strong>責任者電話:</strong> {manager.phone}</Typography>
                                      {manager.email && (
                                        <Typography variant="body2"><strong>責任者メール:</strong> {manager.email}</Typography>
                                      )}
                                    </>
                                  ) : (
                                    <Typography variant="body2" color="text.secondary">責任者が設定されていません</Typography>
                                  );
                                })()}
                              </Grid>
                            </Grid>
                          </AccordionDetails>
                        </Accordion>
                      ))
                    )}
                  </>
                ) : null;
              })()
            ) : (
              <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                代理店を選択してください
              </Typography>
            )}
          </CardContent>
        </Card>
      )}

      {/* イベントマスタタブ */}
      {tabValue === 2 && (
        <Card>
          <CardHeader 
            title="イベントマスタ"
            subheader="イベント場所・料金設定管理"
            action={
              <Box sx={{ display: 'flex', gap: 2 }}>
                <FormControl sx={{ minWidth: 200 }}>
                  <InputLabel>代理店選択</InputLabel>
                  <Select
                    value={selectedAgencyForManagement}
                    onChange={(e) => setSelectedAgencyForManagement(e.target.value)}
                    label="代理店選択"
                  >
                    <MenuItem value="">全て表示</MenuItem>
                    {agencies.map((agency) => (
                      <MenuItem key={agency.id} value={agency.id}>
                        {agency.companyName}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                <Button
                  variant="contained"
                  startIcon={<AddIcon />}
                  onClick={() => {
                    setEditingLocation(null);
                    setLocationData(initialLocationData);
                    setLocationDetailInputs([]);
                    setLocationDialogOpen(true);
                  }}
                >
                  場所追加
                </Button>
              </Box>
            }
          />
          <CardContent>
            {selectedAgencyForManagement === '' ? (
              locations.length === 0 ? (
                <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                  まだイベント場所が登録されていません
                </Typography>
              ) : (
                locations.map((location) => (
              <Accordion key={location.id} sx={{ mb: 2 }}>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                    <Typography variant="h6" sx={{ flexGrow: 1 }}>
                      {location.locationName} ({getAgencyName(location.agencyId)})
                    </Typography>
                    <IconButton
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleEditLocation(location);
                      }}
                      color="primary"
                    >
                      <EditIcon />
                    </IconButton>
                  </Box>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle1" gutterBottom>基本情報</Typography>
                      <Typography variant="body2"><strong>住所:</strong> {location.address}</Typography>
                      <Typography variant="body2"><strong>場所名:</strong> {location.locationName}</Typography>
                      <Typography variant="body2"><strong>詳細:</strong> {location.locationDetails}</Typography>
                      
                      {/* 場所詳細リスト */}
                      {location.locationDetailList && location.locationDetailList.length > 0 && (
                        <Box sx={{ mt: 2 }}>
                          <Typography variant="subtitle2" gutterBottom>場所詳細一覧</Typography>
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                            {location.locationDetailList.map((detail) => (
                              <Chip key={detail.id} label={detail.name} size="small" color="primary" variant="outlined" />
                            ))}
                          </Box>
                        </Box>
                      )}
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle1" gutterBottom>料金設定</Typography>
                      {/* 料金設定の表示は省略 */}
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>
                ))
              )
            ) : (
              (() => {
                const filteredLocations = locations.filter(location => location.agencyId === selectedAgencyForManagement);
                return filteredLocations.length === 0 ? (
                  <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                    選択された代理店にはまだイベント場所が登録されていません
                  </Typography>
                ) : (
                  filteredLocations.map((location) => (
              <Accordion key={location.id} sx={{ mb: 2 }}>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>
                    <Typography variant="h6" sx={{ flexGrow: 1 }}>
                      {location.locationName} ({getAgencyName(location.agencyId)})
                    </Typography>
                    <IconButton
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleEditLocation(location);
                      }}
                      color="primary"
                    >
                      <EditIcon />
                    </IconButton>
                  </Box>
                </AccordionSummary>
                <AccordionDetails>
                  <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle1" gutterBottom>基本情報</Typography>
                      <Typography variant="body2"><strong>住所:</strong> {location.address}</Typography>
                      <Typography variant="body2"><strong>場所名:</strong> {location.locationName}</Typography>
                      <Typography variant="body2"><strong>詳細:</strong> {location.locationDetails}</Typography>
                      
                      {/* 場所詳細リスト */}
                      {location.locationDetailList && location.locationDetailList.length > 0 && (
                        <Box sx={{ mt: 2 }}>
                          <Typography variant="subtitle2" gutterBottom>場所詳細</Typography>
                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                            {location.locationDetailList.map((detail) => (
                              <Chip key={detail.id} label={detail.name} size="small" color="primary" variant="outlined" />
                            ))}
                          </Box>
                        </Box>
                      )}
                    </Grid>
                    <Grid item xs={12} md={6}>
                      <Typography variant="subtitle1" gutterBottom>料金設定</Typography>
                      {/* 料金設定の表示は省略 */}
                    </Grid>
                  </Grid>
                </AccordionDetails>
              </Accordion>
                  ))
                );
              })()
            )}
          </CardContent>
        </Card>
      )}



      {/* レイヤー管理タブ */}
      {tabValue === 3 && (
        <Card>
          <CardHeader 
            title="レイヤー管理"
            subheader="代理店組織階層・担当店舗管理"
            action={
              <FormControl sx={{ minWidth: 200 }}>
                <InputLabel>代理店選択</InputLabel>
                <Select
                  value={selectedAgencyForManagement}
                  label="代理店選択"
                  onChange={(e) => setSelectedAgencyForManagement(e.target.value)}
                >
                  {agencies.map((agency) => (
                    <MenuItem key={agency.id} value={agency.id}>
                      {agency.companyName}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            }
          />
          <CardContent>
            {selectedAgencyForManagement ? (
              (() => {
                const selectedAgency = agencies.find(a => a.id === selectedAgencyForManagement);
                if (!selectedAgency) return null;

                // レイヤー横軸＋親子関係線の組織図コンポーネント
                const OrgChart = () => {
                  const containerRef = useRef<HTMLDivElement>(null);
                  const [personRefs, setPersonRefs] = useState<Record<string, HTMLDivElement>>({});
                  const [connections, setConnections] = useState<Array<{
                    from: string;
                    to: string;
                    fromX: number;
                    fromY: number;
                    toX: number;
                    toY: number;
                  }>>([]);

                  const allPersons = [
                    ...selectedAgency.layers.layer1,
                    ...selectedAgency.layers.layer2,
                    ...selectedAgency.layers.layer3,
                    ...selectedAgency.layers.layer4
                  ];

                  // refコールバックをメモ化
                  const setPersonRef = useCallback((personId: string) => (el: HTMLDivElement | null) => {
                    if (el) {
                      setPersonRefs(prev => {
                        if (prev[personId] === el) return prev; // 同じ要素なら更新しない
                        return { ...prev, [personId]: el };
                      });
                    }
                  }, []);

                  // 人員カードを描画
                  const renderPersonCard = (person: LayerPerson, level: number) => (
                    <Paper
                      ref={setPersonRef(person.id)}
                      sx={{
                        p: 1.5,
                        width: 100,
                        minHeight: 60,
                        border: '2px solid',
                        borderColor:
                          level === 0 ? 'primary.main' :
                          level === 1 ? 'secondary.main' :
                          level === 2 ? 'warning.main' : 'success.main',
                        borderRadius: 2,
                        bgcolor: level === 0 ? 'primary.light' : 'background.paper',
                        color: level === 0 ? 'white' : 'inherit',
                        textAlign: 'center',
                        position: 'relative',
                        zIndex: 2,
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'center'
                      }}
                    >
                      <Typography variant="subtitle2" fontWeight="bold" sx={{ fontSize: '0.75rem', lineHeight: 1.2 }}>
                        {person.name}
                      </Typography>
                      <Typography variant="caption" color={level === 0 ? 'inherit' : 'text.secondary'} sx={{ fontSize: '0.65rem', lineHeight: 1.1 }}>
                        {person.position}
                      </Typography>
                    </Paper>
                  );

                  // 店舗カードを描画
                  const renderStoreCard = (store: Store) => (
                    <Paper sx={{ 
                      p: 1, 
                      width: 80,
                      textAlign: 'center', 
                      bgcolor: 'grey.100', 
                      border: '1px solid', 
                      borderColor: 'divider', 
                      borderRadius: 1,
                      position: 'relative',
                      zIndex: 2
                    }}>
                      <Typography variant="caption" fontWeight="bold" sx={{ fontSize: '0.7rem' }}>
                        {store.name}
                      </Typography>
                    </Paper>
                  );

                  // 各レイヤーのデータを取得
                  const layer1People = selectedAgency.layers.layer1;
                  const layer2People = selectedAgency.layers.layer2;
                  const layer3People = selectedAgency.layers.layer3;
                  const layer4People = selectedAgency.layers.layer4;

                  // デバッグ用：レイヤー構造をコンソールに出力
                  console.log('=== 組織図データ構造 ===');
                  console.log('Layer 1:', layer1People.map(p => `${p.name}(${p.position})`));
                  console.log('Layer 2:', layer2People.map(p => `${p.name}(${p.position}) -> ${p.parentLayerPersonId || 'none'}`));
                  console.log('Layer 3:', layer3People.map(p => `${p.name}(${p.position}) -> ${p.parentLayerPersonId}`));
                  console.log('Layer 4:', layer4People.map(p => `${p.name}(${p.position}) -> ${p.parentLayerPersonId}`));
                  
                  // 親子関係の確認
                  layer4People.forEach(person => {
                    const parent = [...layer1People, ...layer2People, ...layer3People].find(p => p.id === person.parentLayerPersonId);
                    console.log(`${person.name} の上司: ${parent ? parent.name : '見つからない'}`);
                  });

                  // 全店舗を取得
                  const allStores = layer4People.flatMap(person => 
                    person.assignedStores.map(storeId => 
                      selectedAgency.stores.find(s => s.id === storeId)
                    ).filter(Boolean)
                  );

                  // 接続線を計算
                  useEffect(() => {
                    const timer = setTimeout(() => {
                      if (Object.keys(personRefs).length === 0 || !containerRef.current) return;

                      const containerRect = containerRef.current.getBoundingClientRect();
                      const newConnections: typeof connections = [];

                      // 各人の親子関係を処理
                      [...layer2People, ...layer3People, ...layer4People].forEach(person => {
                        if (person.parentLayerPersonId && personRefs[person.parentLayerPersonId] && personRefs[person.id]) {
                          const parentElement = personRefs[person.parentLayerPersonId];
                          const childElement = personRefs[person.id];
                          
                          const parentRect = parentElement.getBoundingClientRect();
                          const childRect = childElement.getBoundingClientRect();
                          
                          // SVGのオフセット(-20px)を考慮した座標計算
                          const fromX = parentRect.left + parentRect.width / 2 - containerRect.left + 20;
                          const fromY = parentRect.top + parentRect.height / 2 - containerRect.top + 20;
                          const toX = childRect.left + childRect.width / 2 - containerRect.left + 20;
                          const toY = childRect.top + childRect.height / 2 - containerRect.top + 20;
                          
                          newConnections.push({
                            from: person.parentLayerPersonId,
                            to: person.id,
                            fromX,
                            fromY,
                            toX,
                            toY
                          });
                        }
                      });

                      setConnections(newConnections);
                    }, 200); // より長い遅延でDOM構築完了を確実に待つ

                    return () => clearTimeout(timer);
                  }, [Object.keys(personRefs).length]); // personRefsの数が変わった時のみ実行

                  return (
                    <Box sx={{ overflowX: 'auto', py: 3, px: 3 }}>
                      <Box 
                        ref={containerRef}
                        sx={{ 
                          position: 'relative', 
                          textAlign: 'center', 
                          minHeight: '700px',
                          minWidth: '2000px', // さらに広い最小幅を設定
                          overflow: 'visible',
                          px: 6 // より多くの内側パディング
                        }}
                      >
                      {/* SVG接続線 */}
                      <svg 
                        style={{ 
                          position: 'absolute', 
                          top: '-20px', 
                          left: '-20px', 
                          width: 'calc(100% + 40px)', 
                          height: 'calc(100% + 40px)', 
                          pointerEvents: 'none',
                          zIndex: 1
                        }}
                      >
                        {connections.map((conn, index) => {
                          const midY = conn.fromY + (conn.toY - conn.fromY) / 2;
                          return (
                            <g key={index}>
                              {/* 線の描画を直線的に改善 */}
                              <path
                                d={`M ${conn.fromX} ${conn.fromY} L ${conn.fromX} ${midY} L ${conn.toX} ${midY} L ${conn.toX} ${conn.toY}`}
                                stroke="#1976d2"
                                strokeWidth="3"
                                fill="none"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                opacity="0.9"
                              />
                              {/* 親の接続点にマーカー */}
                              <circle 
                                cx={conn.fromX} 
                                cy={conn.fromY} 
                                r="3" 
                                fill="#1976d2" 
                                opacity="0.9"
                                stroke="white"
                                strokeWidth="1"
                              />
                              {/* 子の接続点にマーカー */}
                              <circle 
                                cx={conn.toX} 
                                cy={conn.toY} 
                                r="3" 
                                fill="#1976d2" 
                                opacity="0.9"
                                stroke="white"
                                strokeWidth="1"
                              />
                            </g>
                          );
                        })}
                      </svg>

                      {/* レイヤー1 */}
                      {layer1People.length > 0 && (
                        <Box sx={{ mb: 5 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 8 }}>
                            {layer1People.map(person => {
                              // 配下のレイヤー2人員を取得し、その中央位置に配置するためのスタイル計算
                              const subordinates = layer2People.filter(l2 => l2.parentLayerPersonId === person.id);
                              const subordinateCount = subordinates.length;
                              
                              // 配下グループの幅に応じて調整
                              const groupWidth = subordinateCount * 150; // 概算
                              
                              return (
                                <Box 
                                  key={person.id}
                                  sx={{ 
                                    width: `${groupWidth}px`,
                                    display: 'flex',
                                    justifyContent: 'center'
                                  }}
                                >
                                  {renderPersonCard(person, 0)}
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}

                      {/* レイヤー2 */}
                      {layer2People.length > 0 && (
                        <Box sx={{ mb: 5 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 6 }}>
                            {layer2People.map(person => {
                              // 配下のレイヤー3人員を取得し、その中央位置に配置するためのスタイル計算
                              const subordinates = layer3People.filter(l3 => l3.parentLayerPersonId === person.id);
                              const subordinateCount = subordinates.length;
                              
                              // 配下グループの幅に応じて調整
                              const groupWidth = subordinateCount * 120; // 概算
                              
                              return (
                                <Box 
                                  key={person.id}
                                  sx={{ 
                                    width: `${groupWidth}px`,
                                    display: 'flex',
                                    justifyContent: 'center'
                                  }}
                                >
                                  {renderPersonCard(person, 1)}
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}

                      {/* レイヤー3 */}
                      {layer3People.length > 0 && (
                        <Box sx={{ mb: 5 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 6 }}>
                            {layer3People.map(person => {
                              // 配下のレイヤー4人員を取得し、その中央位置に配置するためのスタイル計算
                              const subordinates = layer4People.filter(l4 => l4.parentLayerPersonId === person.id);
                              const subordinateCount = subordinates.length;
                              
                              // 配下グループの幅に応じて調整（店舗も含む）
                              const groupWidth = subordinateCount * 120; // 概算
                              
                              return (
                                <Box 
                                  key={person.id}
                                  sx={{ 
                                    width: `${groupWidth}px`,
                                    display: 'flex',
                                    justifyContent: 'center'
                                  }}
                                >
                                  {renderPersonCard(person, 2)}
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}

                      {/* レイヤー4と店舗を一体で配置 */}
                      {layer4People.length > 0 && (
                        <Box sx={{ mb: 5 }}>
                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 5 }}>
                            {layer4People.map(person => {
                              // この人が担当する店舗を取得
                              const personStores = selectedAgency.stores.filter(store => 
                                person.assignedStores.includes(store.id)
                              );
                              
                              return (
                                <Box key={person.id} sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 2 }}>
                                  {/* レイヤー4の人 */}
                                  {renderPersonCard(person, 3)}
                                  
                                  {/* その人の担当店舗を真下に配置 */}
                                  {personStores.map(store => (
                                    <Box key={store.id}>
                                      {renderStoreCard(store)}
                                    </Box>
                                  ))}
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}
                      </Box>
                    </Box>
                  );
                };

                return (
                  <Box>
                    {(['layer1', 'layer2', 'layer3', 'layer4'] as const).map((layerKey) => (
                      <Accordion key={layerKey} sx={{ mb: 2 }}>
                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                          <Typography variant="h6">
                            レイヤー{layerKey.slice(-1)} ({selectedAgency.layers[layerKey].length}名)
                          </Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                          <Box sx={{ mb: 2 }}>
                            <Button
                              variant="outlined"
                              startIcon={<AddIcon />}
                              onClick={() => {
                                setEditingLayer(layerKey);
                                setEditingLayerPerson(null);
                                setLayerPersonData({
                                  name: '',
                                  position: '',
                                  phone: '',
                                  email: '',
                                  assignedStores: [],
                                  parentLayerPersonId: undefined
                                });
                                setLayerDialogOpen(true);
                              }}
                            >
                              人員追加
                            </Button>
                          </Box>
                          {selectedAgency.layers[layerKey].map((person) => (
                            <Paper key={person.id} sx={{ p: 2, mb: 2 }}>
                              <Grid container spacing={2} alignItems="center">
                                <Grid item xs={12} md={3}>
                                  <Typography variant="subtitle1" fontWeight="bold">
                                    {person.name}
                                  </Typography>
                                  <Typography variant="body2" color="text.secondary">
                                    {person.position}
                                  </Typography>
                                </Grid>
                                <Grid item xs={12} md={3}>
                                  <Typography variant="body2">
                                    📞 {person.phone}
                                  </Typography>
                                  {person.email && (
                                    <Typography variant="body2">
                                      📧 {person.email}
                                    </Typography>
                                  )}
                                </Grid>
                                <Grid item xs={12} md={4}>
                                  <Typography variant="body2" gutterBottom>
                                    <strong>担当店舗:</strong>
                                  </Typography>
                                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mb: 1 }}>
                                    {person.assignedStores.map((storeId) => {
                                      const store = selectedAgency.stores.find(s => s.id === storeId);
                                      return store ? (
                                        <Chip key={storeId} label={store.name} size="small" />
                                      ) : null;
                                    })}
                                    {person.assignedStores.length === 0 && (
                                      <Typography variant="caption" color="text.secondary">
                                        担当店舗なし
                                      </Typography>
                                    )}
                                  </Box>
                                  {/* 上位担当者表示 */}
                                  {person.parentLayerPersonId && (
                                    <>
                                      <Typography variant="body2" gutterBottom>
                                        <strong>上位担当者:</strong>
                                      </Typography>
                                      {(() => {
                                        const parentPerson = [
                                          ...selectedAgency.layers.layer1,
                                          ...selectedAgency.layers.layer2,
                                          ...selectedAgency.layers.layer3,
                                          ...selectedAgency.layers.layer4
                                        ].find(p => p.id === person.parentLayerPersonId);
                                        
                                        if (!parentPerson) {
                                          return (
                                            <Typography variant="caption" color="error">
                                              上位担当者が見つかりません
                                            </Typography>
                                          );
                                        }
                                        
                                        // どのレイヤーの人かを判定
                                        let layerLabel = '';
                                        if (selectedAgency.layers.layer1.find(p => p.id === parentPerson.id)) {
                                          layerLabel = 'L1';
                                        } else if (selectedAgency.layers.layer2.find(p => p.id === parentPerson.id)) {
                                          layerLabel = 'L2';
                                        } else if (selectedAgency.layers.layer3.find(p => p.id === parentPerson.id)) {
                                          layerLabel = 'L3';
                                        } else if (selectedAgency.layers.layer4.find(p => p.id === parentPerson.id)) {
                                          layerLabel = 'L4';
                                        }
                                        
                                        return (
                                          <Chip 
                                            label={`[${layerLabel}] ${parentPerson.name} (${parentPerson.position})`} 
                                            size="small" 
                                            color="primary"
                                            variant="outlined"
                                          />
                                        );
                                      })()}
                                    </>
                                  )}
                                </Grid>
                                <Grid item xs={12} md={2}>
                                  <Box sx={{ display: 'flex', gap: 1 }}>
                                    <IconButton
                                      size="small"
                                      onClick={() => {
                                        setEditingLayer(layerKey);
                                        setEditingLayerPerson(person);
                                        setLayerPersonData({
                                          name: person.name,
                                          position: person.position,
                                          phone: person.phone,
                                          email: person.email || '',
                                          assignedStores: [...person.assignedStores],
                                          parentLayerPersonId: person.parentLayerPersonId
                                        });
                                        setLayerDialogOpen(true);
                                      }}
                                    >
                                      <EditIcon />
                                    </IconButton>
                                    <IconButton
                                      size="small"
                                      color="error"
                                      onClick={() => {
                                        if (confirm(`${person.name}を削除しますか？`)) {
                                          setAgencies(prev => prev.map(agency => 
                                            agency.id === selectedAgencyForManagement
                                              ? {
                                                  ...agency,
                                                  layers: {
                                                    ...agency.layers,
                                                    [layerKey]: agency.layers[layerKey].filter(p => p.id !== person.id)
                                                  }
                                                }
                                              : agency
                                          ));
                                          setSaveMessage('人員を削除しました');
                                          setTimeout(() => setSaveMessage(''), 3000);
                                        }
                                      }}
                                    >
                                      <DeleteIcon />
                                    </IconButton>
                                  </Box>
                                </Grid>
                              </Grid>
                            </Paper>
                          ))}
                        </AccordionDetails>
                      </Accordion>
                    ))}
                  </Box>
                );
              })()
            ) : (
              <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                代理店を選択してください
              </Typography>
            )}
          </CardContent>
        </Card>
      )}

      {/* 組織図タブ */}
      {tabValue === 4 && (
        <Card>
          <CardHeader 
            title="組織図"
            subheader="代理店組織構造の視覚化"
            action={
              <FormControl sx={{ minWidth: 200 }}>
                <InputLabel>代理店選択</InputLabel>
                <Select
                  value={selectedAgencyForManagement}
                  label="代理店選択"
                  onChange={(e) => setSelectedAgencyForManagement(e.target.value)}
                >
                  {agencies.map((agency) => (
                    <MenuItem key={agency.id} value={agency.id}>
                      {agency.companyName}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            }
          />
          <CardContent>
            {selectedAgencyForManagement ? (
              (() => {
                const selectedAgency = agencies.find(a => a.id === selectedAgencyForManagement);
                if (!selectedAgency) return null;



                // レイヤー横軸＋親子関係線の組織図コンポーネント
                const OrgChart = () => {
                  const containerRef = useRef<HTMLDivElement>(null);
                  const [personRefs, setPersonRefs] = useState<Record<string, HTMLDivElement>>({});
                  const [connections, setConnections] = useState<Array<{
                    from: string;
                    to: string;
                    fromX: number;
                    fromY: number;
                    toX: number;
                    toY: number;
                  }>>([]);

                  const allPersons = [
                    ...selectedAgency.layers.layer1,
                    ...selectedAgency.layers.layer2,
                    ...selectedAgency.layers.layer3,
                    ...selectedAgency.layers.layer4
                  ];

                  // レイヤー別の人員配列取得
                  const layer1People = selectedAgency.layers.layer1;
                  const layer2People = selectedAgency.layers.layer2;
                  const layer3People = selectedAgency.layers.layer3;
                  const layer4People = selectedAgency.layers.layer4;

                  // レイヤー別のスタイル定義
                  const getLayerStyle = (layerIndex: number) => {
                    const layerStyles = [
                      { // レイヤー1: 経営層
                        bgcolor: 'white', // 白背景
                        borderColor: '#1976d2', // 青
                        textColor: 'black',
                        shadowLevel: 4
                      },
                      { // レイヤー2: 部長級
                        bgcolor: 'white', // 白背景
                        borderColor: '#388e3c', // 緑
                        textColor: 'black',
                        shadowLevel: 3
                      },
                      { // レイヤー3: 課長級
                        bgcolor: 'white', // 白背景
                        borderColor: '#f57c00', // オレンジ
                        textColor: 'black',
                        shadowLevel: 2
                      },
                      { // レイヤー4: 店長級
                        bgcolor: 'white', // 白背景
                        borderColor: '#e91e63', // ピンク
                        textColor: 'black',
                        shadowLevel: 1
                      }
                    ];
                    return layerStyles[layerIndex] || layerStyles[0];
                  };

                  // 人物カードをレンダリングする関数
                  const renderPersonCard = (person: LayerPerson, layerIndex: number) => {
                    const style = getLayerStyle(layerIndex);
                    return (
                      <Box
                        key={person.id}
                        ref={setPersonRef(person.id)}
                        sx={{
                          width: '110px',
                          minHeight: '70px',
                          bgcolor: style.bgcolor,
                          border: `3px solid ${style.borderColor}`,
                          borderRadius: 3,
                          p: 1.5,
                          boxShadow: style.shadowLevel,
                          zIndex: 2,
                          display: 'flex',
                          flexDirection: 'column',
                          justifyContent: 'center',
                          alignItems: 'center',
                          position: 'relative',
                          transition: 'transform 0.2s ease-in-out',
                          '&:hover': {
                            transform: 'translateY(-2px)',
                            boxShadow: style.shadowLevel + 2
                          }
                        }}
                      >
                        <Typography 
                          variant="caption" 
                          fontWeight="bold" 
                          fontSize="11px" 
                          textAlign="center"
                          sx={{ color: style.textColor, lineHeight: 1.2 }}
                        >
                          {person.name}
                        </Typography>
                        <Typography 
                          variant="caption" 
                          fontSize="9px" 
                          textAlign="center"
                          sx={{ color: style.textColor, opacity: 0.9, lineHeight: 1.1 }}
                        >
                          {person.position}
                        </Typography>
                      </Box>
                    );
                  };

                  // 店舗カードをレンダリングする関数
                  const renderStoreCard = (store: Store) => (
                    <Box
                      sx={{
                        width: '110px',
                        minHeight: '50px',
                        bgcolor: '#f5f5f5',
                        border: '2px solid #9e9e9e',
                        borderRadius: 2,
                        p: 1.5,
                        boxShadow: 1,
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        transition: 'transform 0.2s ease-in-out',
                        '&:hover': {
                          transform: 'translateY(-1px)',
                          boxShadow: 2,
                          bgcolor: '#eeeeee'
                        }
                      }}
                    >
                      <Typography 
                        variant="caption" 
                        fontSize="10px" 
                        textAlign="center" 
                        fontWeight="bold"
                        sx={{ color: '#424242' }}
                      >
                        🏪 {store.name}
                      </Typography>
                    </Box>
                  );

                  // refコールバックをメモ化
                  const setPersonRef = useCallback((personId: string) => (el: HTMLDivElement | null) => {
                    if (el) {
                      setPersonRefs(prev => {
                        if (prev[personId] === el) return prev; // 同じ要素なら更新しない
                        return { ...prev, [personId]: el };
                      });
                    }
                  }, []);

                  // 座標計算のuseEffect
                  useEffect(() => {
                    if (!containerRef.current || Object.keys(personRefs).length === 0) return;

                    const timer = setTimeout(() => {
                      const containerRect = containerRef.current!.getBoundingClientRect();
                      const newConnections: typeof connections = [];

                      // 各人の親子関係を処理
                      [...layer2People, ...layer3People, ...layer4People].forEach(person => {
                        if (person.parentLayerPersonId && personRefs[person.parentLayerPersonId] && personRefs[person.id]) {
                          const parentElement = personRefs[person.parentLayerPersonId];
                          const childElement = personRefs[person.id];
                          
                          const parentRect = parentElement.getBoundingClientRect();
                          const childRect = childElement.getBoundingClientRect();
                          
                          // SVGのオフセット(-20px)を考慮した座標計算
                          const fromX = parentRect.left + parentRect.width / 2 - containerRect.left + 20;
                          const fromY = parentRect.top + parentRect.height / 2 - containerRect.top + 20;
                          const toX = childRect.left + childRect.width / 2 - containerRect.left + 20;
                          const toY = childRect.top + childRect.height / 2 - containerRect.top + 20;
                          
                          newConnections.push({
                            from: person.parentLayerPersonId,
                            to: person.id,
                            fromX,
                            fromY,
                            toX,
                            toY
                          });
                        }
                      });

                      setConnections(newConnections);
                    }, 200); // より長い遅延でDOM構築完了を確実に待つ

                    return () => clearTimeout(timer);
                  }, [Object.keys(personRefs).length]); // personRefsの数が変わった時のみ実行

                  return (
                    <Box sx={{ overflowX: 'auto', py: 3, px: 3 }}>
                      <Box 
                        ref={containerRef}
                        sx={{ 
                          position: 'relative', 
                          textAlign: 'center', 
                          minHeight: '700px',
                          minWidth: '2000px', // さらに広い最小幅を設定
                          overflow: 'visible',
                          px: 6 // より多くの内側パディング
                        }}
                      >
                      {/* SVG接続線 */}
                      <svg 
                        style={{ 
                          position: 'absolute', 
                          top: '-20px', 
                          left: '-20px', 
                          width: 'calc(100% + 40px)', 
                          height: 'calc(100% + 40px)', 
                          pointerEvents: 'none',
                          zIndex: 1
                        }}
                      >
                        {connections.map((conn, index) => {
                          const midY = conn.fromY + (conn.toY - conn.fromY) / 2;
                          return (
                            <g key={index}>
                              {/* 線の描画を直線的に改善 */}
                              <path
                                d={`M ${conn.fromX} ${conn.fromY} L ${conn.fromX} ${midY} L ${conn.toX} ${midY} L ${conn.toX} ${conn.toY}`}
                                stroke="#1976d2"
                                strokeWidth="3"
                                fill="none"
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                opacity="0.9"
                              />
                              {/* 親の接続点にマーカー */}
                              <circle 
                                cx={conn.fromX} 
                                cy={conn.fromY} 
                                r="3" 
                                fill="#1976d2" 
                                opacity="0.9"
                                stroke="white"
                                strokeWidth="1"
                              />
                              {/* 子の接続点にマーカー */}
                              <circle 
                                cx={conn.toX} 
                                cy={conn.toY} 
                                r="3" 
                                fill="#1976d2" 
                                opacity="0.9"
                                stroke="white"
                                strokeWidth="1"
                              />
                            </g>
                          );
                        })}
                      </svg>

                      {/* レイヤー1 */}
                      {layer1People.length > 0 && (
                        <Box sx={{ mb: 8 }}>

                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 12 }}>
                            {layer1People.map(person => {
                              // 配下のレイヤー2人員を取得し、その中央位置に配置するためのスタイル計算
                              const subordinates = layer2People.filter(l2 => l2.parentLayerPersonId === person.id);
                              const subordinateCount = subordinates.length;
                              const subordinateWidth = subordinateCount * 130 + (subordinateCount - 1) * 20; // カード幅110px + margin 20px
                              
                              return (
                                <Box 
                                  key={person.id}
                                  sx={{ 
                                    width: Math.max(subordinateWidth, 110), // 部下の幅またはカードの最小幅
                                    display: 'flex', 
                                    justifyContent: 'center' 
                                  }}
                                >
                                  {renderPersonCard(person, 0)}
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}

                      {/* レイヤー2 */}
                      {layer2People.length > 0 && (
                        <Box sx={{ mb: 8 }}>

                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 6 }}>
                            {layer2People.map(person => {
                              // 配下のレイヤー3人員を取得
                              const subordinates = layer3People.filter(l3 => l3.parentLayerPersonId === person.id);
                              const subordinateCount = subordinates.length;
                              const subordinateWidth = subordinateCount * 130 + (subordinateCount - 1) * 20;
                              
                              return (
                                <Box 
                                  key={person.id}
                                  sx={{ 
                                    width: Math.max(subordinateWidth, 110),
                                    display: 'flex', 
                                    justifyContent: 'center' 
                                  }}
                                >
                                  {renderPersonCard(person, 1)}
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}

                      {/* レイヤー3 */}
                      {layer3People.length > 0 && (
                        <Box sx={{ mb: 8 }}>

                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 6 }}>
                            {layer3People.map(person => {
                              // 配下のレイヤー4人員を取得
                              const subordinates = layer4People.filter(l4 => l4.parentLayerPersonId === person.id);
                              const subordinateCount = subordinates.length;
                              const subordinateWidth = subordinateCount * 130 + (subordinateCount - 1) * 20;
                              
                              return (
                                <Box 
                                  key={person.id}
                                  sx={{ 
                                    width: Math.max(subordinateWidth, 110),
                                    display: 'flex', 
                                    justifyContent: 'center' 
                                  }}
                                >
                                  {renderPersonCard(person, 2)}
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}

                      {/* レイヤー4と店舗 */}
                      {layer4People.length > 0 && (
                        <Box sx={{ mb: 8 }}>

                          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 8 }}>
                            {layer4People.map(person => {
                              // この人が担当する店舗を取得
                              const personStores = selectedAgency.stores.filter(store => 
                                person.assignedStores.includes(store.id)
                              );
                              
                              return (
                                <Box key={person.id} sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 3 }}>
                                  {/* レイヤー4の人 */}
                                  {renderPersonCard(person, 3)}
                                  
                                  {/* 店舗セクションラベル */}
                                  {personStores.length > 0 && (
                                    <Typography 
                                      variant="body2" 
                                      fontWeight="bold" 
                                      sx={{ 
                                        color: '#9e9e9e', 
                                        mt: 1,
                                        fontSize: '10px'
                                      }}
                                    >
                                      担当店舗
                                    </Typography>
                                  )}
                                  
                                  {/* その人の担当店舗を真下に配置 */}
                                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                    {personStores.map(store => (
                                      <Box key={store.id}>
                                        {renderStoreCard(store)}
                                      </Box>
                                    ))}
                                  </Box>
                                </Box>
                              );
                            })}
                          </Box>
                        </Box>
                      )}
                      </Box>
                    </Box>
                  );
                };

                return <OrgChart />;
              })()
            ) : (
              <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
                代理店を選択してください
              </Typography>
            )}
          </CardContent>
        </Card>
      )}



      {/* 代理店編集ダイアログ */}
      <Dialog open={agencyDialogOpen} onClose={() => setAgencyDialogOpen(false)} maxWidth="lg" fullWidth>
        <DialogTitle>{editingAgency ? '代理店編集' : '代理店追加'}</DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom>基本情報</Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                label="会社名"
                value={agencyData.companyName}
                onChange={(e) => setAgencyData({...agencyData, companyName: e.target.value})}
                required
                fullWidth
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                label="会社住所"
                value={agencyData.address}
                onChange={(e) => setAgencyData({...agencyData, address: e.target.value})}
                required
                fullWidth
              />
            </Grid>
            

          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAgencyDialogOpen(false)}>キャンセル</Button>
          <Button onClick={handleSaveAgency} variant="contained">
            {editingAgency ? '更新' : '追加'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* イベント場所編集ダイアログ */}
      <Dialog open={locationDialogOpen} onClose={() => setLocationDialogOpen(false)} maxWidth="lg" fullWidth>
        <DialogTitle>{editingLocation ? 'イベント場所編集' : 'イベント場所追加'}</DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <FormControl fullWidth required>
                <InputLabel>代理店</InputLabel>
                <Select
                  value={locationData.agencyId}
                  onChange={(e) => setLocationData({...locationData, agencyId: e.target.value})}
                >
                  {agencies.map(agency => (
                    <MenuItem key={agency.id} value={agency.id}>
                      {agency.companyName}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={6}>
              <TextField
                label="イベント実施場所"
                value={locationData.locationName}
                onChange={(e) => setLocationData({...locationData, locationName: e.target.value})}
                required
                fullWidth
              />
            </Grid>
            <Grid item xs={12}>
              <TextField
                label="住所"
                value={locationData.address}
                onChange={(e) => setLocationData({...locationData, address: e.target.value})}
                required
                fullWidth
              />
            </Grid>

            
            {/* 場所詳細管理セクション */}
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mt: 2 }}>
                <Box>
                  <Typography variant="h6" gutterBottom>
                    場所詳細管理
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    このイベント場所に紐づく詳細な場所情報を登録できます
                  </Typography>
                </Box>
                <Button
                  variant="outlined"
                  startIcon={<AddIcon />}
                  onClick={handleAddLocationDetailInput}
                  size="small"
                >
                  詳細追加
                </Button>
              </Box>
            </Grid>
            
            {/* 既存の場所詳細（編集時のみ表示） */}
            {editingLocation && locationData.locationDetailList.length > 0 && (
              <Grid item xs={12}>
                <Typography variant="subtitle2" gutterBottom>既存の場所詳細</Typography>
                <TableContainer component={Paper} variant="outlined" sx={{ mb: 2 }}>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>場所詳細名</TableCell>
                        <TableCell align="center">操作</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {locationData.locationDetailList.map((detail) => (
                        <TableRow key={detail.id}>
                          <TableCell>{detail.name}</TableCell>
                          <TableCell align="center">
                            <IconButton
                              size="small"
                              onClick={() => handleRemoveExistingLocationDetail(detail.id)}
                              color="error"
                            >
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>
            )}
            
            {/* 動的場所詳細入力フィールド */}
            {locationDetailInputs.length > 0 && (
              <Grid item xs={12}>
                <Typography variant="subtitle2" gutterBottom>新しい場所詳細</Typography>
                {locationDetailInputs.map((input, index) => (
                  <Box key={input.tempId} sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                    <TextField
                      label={`場所詳細名 ${index + 1}`}
                      value={input.name}
                      onChange={(e) => handleLocationDetailInputChange(input.tempId, 'name', e.target.value)}
                      fullWidth
                      placeholder="例: メイン販売エリア"
                      size="small"
                    />
                    <IconButton
                      size="small"
                      onClick={() => handleRemoveLocationDetailInput(input.tempId)}
                      color="error"
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Box>
                ))}
              </Grid>
            )}
            
            <Grid item xs={12}>
              <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>
                <MoneyIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
                曜日別請求単価設定
              </Typography>
            </Grid>
            
            {weekdays.map((day) => (
              <Fragment key={day.key}>
                <Grid item xs={12} md={2}>
                  <Typography variant="subtitle2" sx={{ mt: 2 }}>
                    {day.label}
                  </Typography>
                </Grid>
                <Grid item xs={12} md={5}>
                  <TextField
                    label="クローザー請求単価"
                    type="number"
                    value={locationData.pricing[day.key].closer}
                    onChange={(e) => setLocationData({
                      ...locationData,
                      pricing: {
                        ...locationData.pricing,
                        [day.key]: {
                          ...locationData.pricing[day.key],
                          closer: Number(e.target.value)
                        }
                      }
                    })}
                    fullWidth
                    InputProps={{
                      startAdornment: <InputAdornment position="start">¥</InputAdornment>,
                      endAdornment: <InputAdornment position="end">/ 日</InputAdornment>,
                    }}
                  />
                </Grid>
                <Grid item xs={12} md={5}>
                  <TextField
                    label="ガール請求単価"
                    type="number"
                    value={locationData.pricing[day.key].girl}
                    onChange={(e) => setLocationData({
                      ...locationData,
                      pricing: {
                        ...locationData.pricing,
                        [day.key]: {
                          ...locationData.pricing[day.key],
                          girl: Number(e.target.value)
                        }
                      }
                    })}
                    fullWidth
                    InputProps={{
                      startAdornment: <InputAdornment position="start">¥</InputAdornment>,
                      endAdornment: <InputAdornment position="end">/ 日</InputAdornment>,
                    }}
                  />
                </Grid>
              </Fragment>
            ))}
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setLocationDialogOpen(false)}>キャンセル</Button>
          <Button onClick={handleSaveLocation} variant="contained">
            {editingLocation ? '更新' : '追加'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* レイヤー人員管理ダイアログ */}
      <Dialog open={layerDialogOpen} onClose={() => setLayerDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          {editingLayerPerson ? 'レイヤー人員編集' : 'レイヤー人員追加'}
          {editingLayer && ` - レイヤー${editingLayer.slice(-1)}`}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <TextField
                label="名前"
                value={layerPersonData.name}
                onChange={(e) => setLayerPersonData({...layerPersonData, name: e.target.value})}
                fullWidth
                required
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                label="役職"
                value={layerPersonData.position}
                onChange={(e) => setLayerPersonData({...layerPersonData, position: e.target.value})}
                fullWidth
                required
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                label="電話番号"
                value={layerPersonData.phone}
                onChange={(e) => setLayerPersonData({...layerPersonData, phone: e.target.value})}
                fullWidth
                required
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                label="メールアドレス"
                value={layerPersonData.email}
                onChange={(e) => setLayerPersonData({...layerPersonData, email: e.target.value})}
                fullWidth
                type="email"
              />
            </Grid>

            {/* 上位レイヤー選択（レイヤー1以外） */}
            {editingLayer && editingLayer !== 'layer1' && (
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel>上位担当者</InputLabel>
                  <Select
                    value={layerPersonData.parentLayerPersonId || ''}
                    label="上位担当者"
                    onChange={(e) => setLayerPersonData({
                      ...layerPersonData, 
                      parentLayerPersonId: e.target.value || undefined
                    })}
                  >
                    <MenuItem value="">選択なし</MenuItem>
                    {(() => {
                      const selectedAgency = agencies.find(a => a.id === selectedAgencyForManagement);
                      if (!selectedAgency) return null;
                      
                      // 現在のレイヤーより上位の全てのレイヤーの人員を取得
                      let upperLayerPeople: LayerPerson[] = [];
                      if (editingLayer === 'layer2') {
                        upperLayerPeople = [
                          ...selectedAgency.layers.layer1
                        ];
                      } else if (editingLayer === 'layer3') {
                        upperLayerPeople = [
                          ...selectedAgency.layers.layer1,
                          ...selectedAgency.layers.layer2
                        ];
                      } else if (editingLayer === 'layer4') {
                        upperLayerPeople = [
                          ...selectedAgency.layers.layer1,
                          ...selectedAgency.layers.layer2,
                          ...selectedAgency.layers.layer3
                        ];
                      }
                      
                      // レイヤー別にグループ化して表示
                      const groupedOptions: React.ReactNode[] = [];
                      
                      if (editingLayer !== 'layer1' && selectedAgency.layers.layer1.length > 0) {
                        groupedOptions.push(
                          <Typography key="layer1-header" variant="subtitle2" sx={{ px: 2, py: 1, bgcolor: 'action.hover', fontWeight: 'bold' }}>
                            レイヤー1
                          </Typography>
                        );
                        selectedAgency.layers.layer1.forEach(person => {
                          groupedOptions.push(
                            <MenuItem key={person.id} value={person.id} sx={{ pl: 3 }}>
                              {person.name} ({person.position})
                            </MenuItem>
                          );
                        });
                      }
                      
                      if ((editingLayer === 'layer3' || editingLayer === 'layer4') && selectedAgency.layers.layer2.length > 0) {
                        groupedOptions.push(
                          <Typography key="layer2-header" variant="subtitle2" sx={{ px: 2, py: 1, bgcolor: 'action.hover', fontWeight: 'bold' }}>
                            レイヤー2
                          </Typography>
                        );
                        selectedAgency.layers.layer2.forEach(person => {
                          groupedOptions.push(
                            <MenuItem key={person.id} value={person.id} sx={{ pl: 3 }}>
                              {person.name} ({person.position})
                            </MenuItem>
                          );
                        });
                      }
                      
                      if (editingLayer === 'layer4' && selectedAgency.layers.layer3.length > 0) {
                        groupedOptions.push(
                          <Typography key="layer3-header" variant="subtitle2" sx={{ px: 2, py: 1, bgcolor: 'action.hover', fontWeight: 'bold' }}>
                            レイヤー3
                          </Typography>
                        );
                        selectedAgency.layers.layer3.forEach(person => {
                          groupedOptions.push(
                            <MenuItem key={person.id} value={person.id} sx={{ pl: 3 }}>
                              {person.name} ({person.position})
                            </MenuItem>
                          );
                        });
                      }
                      
                      return groupedOptions;
                    })()}
                  </Select>
                </FormControl>
              </Grid>
            )}

            {/* 担当店舗選択 */}
            <Grid item xs={12}>
              <Typography variant="subtitle2" gutterBottom>
                担当店舗
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>
                {(() => {
                  const selectedAgency = agencies.find(a => a.id === selectedAgencyForManagement);
                  return selectedAgency?.stores.map(store => (
                    <FormControlLabel
                      key={store.id}
                      control={
                        <Checkbox
                          checked={layerPersonData.assignedStores.includes(store.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setLayerPersonData({
                                ...layerPersonData,
                                assignedStores: [...layerPersonData.assignedStores, store.id]
                              });
                            } else {
                              setLayerPersonData({
                                ...layerPersonData,
                                assignedStores: layerPersonData.assignedStores.filter(id => id !== store.id)
                              });
                            }
                          }}
                        />
                      }
                      label={store.name}
                    />
                  ));
                })()}
              </Box>
              {(() => {
                const selectedAgency = agencies.find(a => a.id === selectedAgencyForManagement);
                return selectedAgency?.stores.length === 0 && (
                  <Typography variant="body2" color="text.secondary">
                    店舗が登録されていません
                  </Typography>
                );
              })()}
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setLayerDialogOpen(false)}>キャンセル</Button>
          <Button onClick={handleSaveLayerPerson} variant="contained">
            {editingLayerPerson ? '更新' : '追加'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* 店舗編集・追加ダイアログ */}
      <Dialog open={storeDialogOpen} onClose={() => setStoreDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>{editingStore ? '店舗編集' : '店舗追加'}</DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            <Grid item xs={12} md={6}>
              <TextField
                label="店舗名"
                value={storeData.name}
                onChange={(e) => setStoreData({...storeData, name: e.target.value})}
                fullWidth
                required
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                label="住所"
                value={storeData.address}
                onChange={(e) => setStoreData({...storeData, address: e.target.value})}
                fullWidth
                required
              />
            </Grid>
            
            <Grid item xs={12} md={6}>
              <TextField
                label="電話番号"
                value={storeData.phone}
                onChange={(e) => setStoreData({...storeData, phone: e.target.value})}
                fullWidth
                required
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setStoreDialogOpen(false)}>キャンセル</Button>
          <Button onClick={handleSaveStore} variant="contained">
            {editingStore ? '更新' : '追加'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ProjectManagement;